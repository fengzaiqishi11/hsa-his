<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>cn.hsa.web</groupId>
    <artifactId>hsa-web</artifactId>
    <version>1.0.0</version>
    <name>hsa-web</name>

    <parent>
        <groupId>cn.hsa.his</groupId>
        <artifactId>hsa-his</artifactId>
        <version>1.0.0</version>
    </parent>

    <properties>
        <start-class>cn.hsa.HsaWebApplication</start-class>
    </properties>

    <!--依赖的scope为provider，即其由适配层决定是否提供-->
    <dependencies>

        <!--公共包依赖-->
        <dependency>
            <groupId>cn.hsa.com</groupId>
            <artifactId>hsa-com</artifactId>
            <version>1.0.0</version>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-log4j12</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--核心实现-->
        <dependency>
            <groupId>cn.hsa.hsaf.core</groupId>
            <artifactId>hsaf-core</artifactId>
            <!--            <exclusions>-->
            <!--                <exclusion>-->
            <!--                    <groupId>com.alibaba</groupId>-->
            <!--                    <artifactId>fastjson</artifactId>-->
            <!--                </exclusion>-->
            <!--            </exclusions>-->
        </dependency>

        <!--适配包-->
        <!--分布式服务-->
        <!--        <dependency>-->
        <!--            <groupId>cn.hsa.hsaf.adapt</groupId>-->
        <!--            <artifactId>hsaf-ali-rpc</artifactId>-->
        <!--            <version>${hsaf-ali-rpc.version}</version>-->
        <!--        </dependency>-->
        <dependency>
            <groupId>cn.hsa.hsaf.adapt</groupId>
            <artifactId>hsaf-generic-rpc</artifactId>
            <version>${hsaf-generic-rpc.version}</version>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>cn.hsa.hsaf.adapt</groupId>-->
        <!--            <artifactId>hsaf-tencent-rpc</artifactId>-->
        <!--            <version>${hsaf-tencent-rpc.version}</version>-->
        <!--        </dependency>-->

        <!--ID唯一生成-->
        <!--        <dependency>-->
        <!--            <groupId>cn.hsa.hsaf.core</groupId>-->
        <!--            <artifactId>hsaf-idgenerator</artifactId>-->
        <!--        </dependency>-->

        <!-- 认证安全组件 -->
        <!--        <dependency>-->
        <!--            <groupId>cn.hsa.hsaf.auth.security</groupId>-->
        <!--            <artifactId>hsaf-auth-security</artifactId>-->
        <!--        </dependency>-->

        <!--MVC框架-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- Spring Cloud 依赖引入,兼容原Property热更新-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-dependencies</artifactId>
            <version>Hoxton.SR10</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>

        <!--数据库访问 开始-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.zaxxer</groupId>
                    <artifactId>HikariCP</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>org.mybatis</groupId>-->
        <!--            <artifactId>mybatis</artifactId>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>org.mybatis</groupId>-->
        <!--            <artifactId>mybatis-spring</artifactId>-->
        <!--        </dependency>-->
        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>persistence-api</artifactId>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>com.github.pagehelper</groupId>-->
        <!--            <artifactId>pagehelper</artifactId>-->
        <!--        </dependency>-->
        <!--数据库访问 结束-->

        <!--分布式缓存-->
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-redis</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- 2.分布式缓存组件 -->
        <dependency>
            <groupId>cn.hsa.hsaf.adapt</groupId>
            <artifactId>hsaf-cache-redis</artifactId>
        </dependency>

        <!--定时任务-->
        <dependency>
            <groupId>com.xuxueli</groupId>
            <artifactId>xxl-job-core</artifactId>
        </dependency>

        <!--工作流依赖-->
<!--        <dependency>-->
<!--            &lt;!&ndash;-->
<!--            <groupId>cn.hsa.hsaf.workflow</groupId>-->
<!--            <artifactId>workflow-sdk</artifactId>-->
<!--            &ndash;&gt;-->
<!--            <groupId>cn.hsa.cep.wfc</groupId>-->
<!--            <artifactId>hsa-cep-wfc-sdk</artifactId>-->
<!--        </dependency>-->
        <!--工作流结束-->

        <!--工具类-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>com.alibaba</groupId>-->
        <!--            <artifactId>fastjson</artifactId>-->
        <!--        </dependency>-->

        <!--Rest接口文档(注解支持)-->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <scope>provided</scope>
        </dependency>

        <!--Rest接口文档-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <!--测试相关-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>cn.bestwu</groupId>
            <artifactId>fastdfs-client-java</artifactId>
            <version>1.27</version>
        </dependency>
        <!--4.对象存储组件-->
        <dependency>
            <groupId>cn.hsa.hsaf.adapt</groupId>
            <artifactId>hsaf-generic-fsstore</artifactId>
        </dependency>

        <!-- session存储 -->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
            <version>${spring-session-data-redis.version}</version>
        </dependency>

        <dependency>
            <groupId>de.schlichtherle.truelicense</groupId>
            <artifactId>truelicense-core</artifactId>
            <version>1.33</version>
        </dependency>
    </dependencies>

       <build>
           <finalName>hsa-web</finalName>
           <plugins>
               <plugin>
                   <groupId>org.springframework.boot</groupId>
                   <artifactId>spring-boot-maven-plugin</artifactId>
                   <version>${spring-boot.version}</version>
                   <configuration>
                       <mainClass>${start-class}</mainClass>
                   </configuration>
                   <executions>
                       <execution>
                           <goals>
                               <goal>repackage</goal>
                           </goals>
                       </execution>
                   </executions>
               </plugin>
               <plugin>
                   <groupId>org.apache.maven.plugins</groupId>
                   <artifactId>maven-jar-plugin</artifactId>
                   <version>2.6</version>
                   <executions>
                       <execution>
                           <phase>package</phase>
                           <goals>
                               <goal>jar</goal>
                           </goals>
                       </execution>
                   </executions>
                   <configuration>
                       <!--所有properties文件均不会打进jar包，其中配置项需在配置中心进行配置-->
                       <excludes>
                           <exclude>*.properties</exclude>
                           <exclude>config/**/*.properties</exclude>
                       </excludes>
                   </configuration>
               </plugin>
               <!--使用docker-maven-plugin插件
               <plugin>
                   <groupId>com.spotify</groupId>
                   <artifactId>docker-maven-plugin</artifactId>
                   <version>1.2.2</version>
                   将插件绑定在某个phase执行
                   <executions>
                       <execution>
                           <id>build-image</id>
                           用户只需执行mvn package ，就会自动执行mvn docker:build
                           <phase>package</phase>
                           <goals>
                               <goal>build</goal>
                           </goals>
                       </execution>
                   </executions>

                   <configuration>
                       指定生成的镜像名,这里是我们的作者名+项目名
                       <imageName>yuanzibo/${project.build.finalName}</imageName>

                       指定标签 这里指定的是镜像的版本，我们默认版本是latest
                       <imageTags>
                           <imageTag>latest</imageTag>
                       </imageTags>

                       指定基础镜像jdk1.8
                       <baseImage>java:8</baseImage>

                       切换到ROOT目录
                       <workdir>/</workdir>
                       <entryPoint>
                           ["java","-Xms256m","-Xmx1024m","-jar","/${project.build.finalName}.jar"]
                       </entryPoint>

                       <exposes>19011</exposes>

                       指定远程 docker api地址
                       <dockerHost>${dockerUrl}</dockerHost>
                       <dockerCertPath>${dockerUrlZs}</dockerCertPath>
                        这里是复制 jar 包到 docker 容器指定目录配置
                       <resources>
                           <resource>
                               <targetPath>/</targetPath>
                               jar 包所在的路径  此处配置的 即对应 target 目录
                               <directory>${project.build.directory}</directory>
                               用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　
                               <include>${project.build.finalName}.jar</include>
                           </resource>
                       </resources>
                   </configuration>
               </plugin>-->
               <plugin>
                   <groupId>org.springframework.boot</groupId>
                   <artifactId>spring-boot-maven-plugin</artifactId>
                   <configuration>
                       <fork>true</fork>
                       <addResources>true</addResources>
                   </configuration>
               </plugin>
           </plugins>
       </build>

<!--        <build>-->
<!--            <finalName>${project.artifactId}</finalName>-->
<!--            <plugins>-->
<!--                &lt;!&ndash;使用docker-maven-plugin插件&ndash;&gt;-->
<!--                <plugin>-->
<!--                    <groupId>com.spotify</groupId>-->
<!--                    <artifactId>docker-maven-plugin</artifactId>-->
<!--                    <version>1.0.0</version>-->

<!--                    &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
<!--                    <executions>-->
<!--                        <execution>-->
<!--                            <id>build-image</id>-->
<!--                            &lt;!&ndash;将插件绑定在package这个phase上。也就是说，-->
<!--                            用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
<!--                            <phase>package</phase>-->
<!--                            <goals>-->
<!--                                <goal>build</goal>-->
<!--                            </goals>-->
<!--                        </execution>-->
<!--                    </executions>-->

<!--                    <configuration>-->
<!--                        &lt;!&ndash;指定生成的镜像名,这里是我们的项目名&ndash;&gt;-->
<!--                        <imageName>${project.artifactId}</imageName>-->
<!--                        &lt;!&ndash;指定标签 这里指定的是镜像的版本，我们默认版本是latest&ndash;&gt;-->
<!--                        <imageTags>-->
<!--                            <imageTag>latest</imageTag>-->
<!--                        </imageTags>-->
<!--                        &lt;!&ndash; 指定我们项目中Dockerfile文件的路径&ndash;&gt;-->
<!--                        <dockerDirectory>${project.basedir}/src/main/resources</dockerDirectory>-->

<!--                        &lt;!&ndash;指定远程docker 地址&ndash;&gt;-->
<!--                        <dockerHost>http://111.22.100.207:2375</dockerHost>-->

<!--                        &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
<!--                        <resources>-->
<!--                            <resource>-->
<!--                                <targetPath>/</targetPath>-->
<!--                                &lt;!&ndash;jar包所在的路径  此处配置的即对应项目中target目录&ndash;&gt;-->
<!--                                <directory>${project.build.directory}</directory>-->
<!--                                &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;-->
<!--                                <include>${project.build.finalName}.jar</include>-->
<!--                            </resource>-->
<!--                        </resources>-->
<!--                    </configuration>-->
<!--                </plugin>-->
<!--            </plugins>-->
<!--        </build>-->
</project>
