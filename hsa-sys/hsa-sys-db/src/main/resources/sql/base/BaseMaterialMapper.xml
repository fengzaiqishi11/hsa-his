<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.hsa.module.base.bmm.dao.BaseMaterialDAO">

    <resultMap type="cn.hsa.module.base.bmm.dto.BaseMaterialDTO" id="BaseMaterialMap">
        <result property="id" column="id" jdbcType="VARCHAR"/>
        <result property="hospCode" column="hosp_code" jdbcType="VARCHAR"/>
        <result property="typeCode" column="type_code" jdbcType="VARCHAR"/>
        <result property="bfcCode" column="bfc_code" jdbcType="INTEGER"/>
        <result property="code" column="code" jdbcType="VARCHAR"/>
        <result property="nationCode" column="nation_code" jdbcType="VARCHAR"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="spec" column="spec" jdbcType="VARCHAR"/>
        <result property="price" column="price" jdbcType="DECIMAL"/>
        <result property="unitCode" column="unit_code" jdbcType="VARCHAR"/>
        <result property="lastBuyPrice" column="last_buy_price" jdbcType="DECIMAL"/>
        <result property="lastSplitBuyPrice" column="last_split_buy_price" jdbcType="DECIMAL"/>
        <result property="avgBuyPrice" column="avg_buy_price" jdbcType="DECIMAL"/>
        <result property="avgSellPrice" column="avg_sell_price" jdbcType="DECIMAL"/>
        <result property="splitRatio" column="split_ratio" jdbcType="INTEGER"/>
        <result property="splitUnitCode" column="split_unit_code" jdbcType="VARCHAR"/>
        <result property="splitPrice" column="split_price" jdbcType="DECIMAL"/>
        <result property="isSuppCurtain" column="is_supp_curtain" jdbcType="VARCHAR"/>
        <result property="useCode" column="use_code" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="prodCode" column="prod_code" jdbcType="VARCHAR"/>
        <result property="regCertNo" column="reg_cert_no" jdbcType="VARCHAR"/>
        <result property="pym" column="pym" jdbcType="VARCHAR"/>
        <result property="wbm" column="wbm" jdbcType="VARCHAR"/>
        <result property="isValid" column="is_valid" jdbcType="VARCHAR"/>
        <result property="crteId" column="crte_id" jdbcType="VARCHAR"/>
        <result property="crteName" column="crte_name" jdbcType="VARCHAR"/>
        <result property="crteTime" column="crte_time" jdbcType="TIMESTAMP"/>
        <result property="bfcName" column="bfcName" jdbcType="VARCHAR"/>
        <result property="bfcId" column="bfcId" jdbcType="VARCHAR"/>
        <result property="prodName" column="prodName" jdbcType="VARCHAR"/>
        <result property="itemCode" column="itemCode" jdbcType="VARCHAR"/>
        <result property="itemName" column="itemName" jdbcType="VARCHAR"/>
        <result property="stockNum" column="stockNum" jdbcType="NUMERIC"/>
        <result property="splitNum" column="split_num" jdbcType="NUMERIC"/>
        <result property="bizId" column="biz_id" jdbcType="VARCHAR"/>
        <result property="bizName" column="bizName" jdbcType="VARCHAR"/>
        <result property="batchNo" column="batch_no" jdbcType="VARCHAR"/>
        <result property="bfcId" column="bfcId" jdbcType="VARCHAR"/>
        <result property="expiryDate" column="expiry_date" jdbcType="TIMESTAMP"/>
        <result property="itemName" column="itemName" jdbcType="VARCHAR"/>
        <result property="prodName" column="prodName" jdbcType="VARCHAR"/>
        <result property="otherName" column="other_name" jdbcType="VARCHAR"/>
        <result property="isOffical" column="is_offical" jdbcType="VARCHAR"/>
        <result property="reimbursementRatio" column="reimbursement_ratio" jdbcType="VARCHAR"/>
    </resultMap>

    <!--查询单个-->
    <select id="getById" resultMap="BaseMaterialMap" >
        select
          id, hosp_code, type_code, bfc_code, code,nation_code, name, spec, price, unit_code, split_ratio, split_unit_code, split_price, is_supp_curtain, use_code, remark, prod_code,
           reg_cert_no, pym, wbm, is_valid, crte_id, crte_name, crte_time,last_buy_price,last_split_buy_price,avg_buy_price,avg_sell_price,model,other_name,
           (select count(0) from stro_stock e where e.item_code = '2' and e.item_id = base_material.id ) as stockFlag,
           (select name from base_product  where base_product.hosp_code = #{hospCode} and prod_code = code) as prodName,
           (select id from base_finance_classify where hosp_code=base_material.hosp_code and code=base_material.bfc_code) bfcId,
           is_offical, reimbursement_ratio
        from base_material
        where id = #{id}  and hosp_code = #{hospCode}
    </select>

    <!-- 判断多个材料有无库存用 -->
    <select id="queryByIds" resultMap="BaseMaterialMap" >
        select
          id, hosp_code, type_code, bfc_code, code,nation_code, name, spec, price, unit_code, split_ratio, split_unit_code, split_price, is_supp_curtain, use_code, remark, prod_code,
           reg_cert_no, pym, wbm, is_valid, crte_id, crte_name, crte_time,last_buy_price,last_split_buy_price,avg_buy_price,avg_sell_price,model,
           (select count(0) from stro_stock e where e.item_code = '2' and e.item_id = base_material.id ) as stockFlag,other_name,
           (select name from base_product  where base_product.hosp_code = #{hospCode} and prod_code = code) as prodName
        from base_material
        where id in
          <foreach collection="ids" item="item" separator="," open="(" close=")">
          #{item}
          </foreach>
          and hosp_code = #{hospCode}
    </select>

    <!--根据编码获取材料信息-->
    <select id="getByCode" resultMap="BaseMaterialMap" >
        select
          id, hosp_code, type_code, bfc_code, code,nation_code, name, spec, price, unit_code, split_ratio, split_unit_code, split_price, is_supp_curtain, use_code, remark, prod_code,
           reg_cert_no, pym, wbm, is_valid, crte_id, crte_name, crte_time,last_buy_price,last_split_buy_price,avg_buy_price,avg_sell_price,model,
           (select count(0) from stro_stock e where e.item_code = '2' and e.item_id = base_material.id ) as stockFlag,other_name,
           (select name from base_product  where base_product.hosp_code = #{hospCode} and prod_code = code) as prodName,
           (select id from base_finance_classify  where code=bfc_code) bfcId
        from base_material
        where code = #{code}  and hosp_code = #{hospCode}
    </select>

    <!--查询所有数据-->
    <select id="queryAll" resultMap="BaseMaterialMap" >
        select
        bm.id, bm.hosp_code, bm.type_code, bm.bfc_code, bm.code,bm.nation_code,
               bm.name, bm.spec, bm.price, bm.unit_code, bm.split_ratio, bm.split_unit_code, bm.split_price,
        bm.is_supp_curtain, bm.use_code, bm.remark, bm.prod_code, bm.reg_cert_no,
               bm.pym, bm.wbm, bm.is_valid, bm.crte_id, bm.crte_name, bm.crte_time,bm.other_name,
        bm.last_buy_price,bm.last_split_buy_price,bm.avg_buy_price,bm.avg_sell_price,bm.model
        from base_material bm
        left join insure_item_match  iim on iim.hosp_item_id = bm.id and bm.hosp_code = iim.hosp_code
        <where>
            bm.hosp_code = #{hospCode}
            <if test="isValid != null and isValid != ''">
                and bm.is_valid = #{isValid}
            </if>
            <if test="downLoadFlag == '1'.toString() ">
                and	iim.hosp_item_id is null
            </if>
            <if test="isValid == null or isValid == ''">
                and bm.is_valid = '1'
            </if>
            <if test="isNationCode == true">
                and bm.nation_code is not null and LENGTH(trim(nation_code))>0
            </if>
            <if test="ids != null">
                and bm.id in
                <foreach collection="ids" item="id" open="(" separator="," close=")">
                #{id}
                </foreach>
            </if>
            <if test="keyword != null and keyword!=''" >
                and (bm.name like concat('%',#{keyword},'%') or bm.pym like concat('%',#{keyword},'%') or bm.wbm like concat('%',#{keyword},'%'))
            </if>
        </where>
    </select>

    <!--查询出符合条件的材料信息-->
    <select id="queryBaseMaterialDTOs" resultMap="BaseMaterialMap">
        select
          id, hosp_code, type_code, bfc_code, code,nation_code, name, spec, price, unit_code, split_ratio, split_unit_code, split_price,
          is_supp_curtain, use_code, remark, prod_code, reg_cert_no, pym, wbm, is_valid, crte_id, crte_name, crte_time,model,other_name,
         last_buy_price,last_split_buy_price,avg_buy_price,avg_sell_price
        from base_material
        where hosp_code = #{hospCode}
        <if test="ids != null and ids.size > 0 ">
        and id in
        <foreach collection="ids" item="id"  open="(" close=")" separator=",">
            #{id}
        </foreach>
        </if>

    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryPage" resultMap="BaseMaterialMap">
        select
          a.id, a.hosp_code, a.type_code, a.bfc_code, a.code,nation_code, a.name, a.name as itemName,
               a.spec, a.price, a.unit_code, a.split_ratio, a.split_unit_code, a.split_price,
          a.is_supp_curtain, a.use_code, a.remark, a.prod_code, a.reg_cert_no, a.pym, a.wbm, a.is_valid, a.crte_id, a.crte_name, a.crte_time,
          a.last_buy_price,a.last_split_buy_price,a.avg_buy_price,a.avg_sell_price,model,a.other_name,
          '2' as itemCode
        from base_material a
        <where>
            <if test="id != null">
                and a.id = #{id}
            </if>
                and a.hosp_code = #{hospCode}
            <if test="typeCode != null and typeCode != ''">
                and a.type_code = #{typeCode}
            </if>
            <if test="bfcCode != null and bfcCode != ''">
                and a.bfc_code = #{bfcCode}
            </if>
            <if test="code != null and code != ''">
                and a.code = #{code}
            </if>
            <if test="name != null and name != ''">
                and a.name = #{name}
            </if>
            <if test="spec != null and spec != ''">
                and a.spec = #{spec}
            </if>
            <if test="price != null">
                and a.price = #{price}
            </if>
            <if test="unitCode != null and unitCode != ''">
                and a.unit_code = #{unitCode}
            </if>
            <if test="splitRatio != null">
                and a.split_ratio = #{splitRatio}
            </if>
            <if test="splitUnitCode != null and splitUnitCode != ''">
                and a.split_unit_code = #{splitUnitCode}
            </if>
            <if test="splitPrice != null">
                and a.split_price = #{splitPrice}
            </if>
            <if test="isSuppCurtain != null">
                and a.is_supp_curtain = #{isSuppCurtain}
            </if>
            <if test="useCode != null and useCode != ''">
                and a.use_code = #{useCode}
            </if>
            <if test="remark != null and remark != ''">
                and a.remark = #{remark}
            </if>
            <if test="prodCode != null">
                and a.prod_code = #{prodCode}
            </if>
            <if test="regCertNo != null and regCertNo != ''">
                and a.reg_cert_no = #{regCertNo}
            </if>
            <if test="isValid != null and isValid!=''">
                and a.is_valid = #{isValid}
            </if>
            <if test="crteId != null">
                and a.crte_id = #{crteId}
            </if>
            <if test="crteName != null and crteName != ''">
                and a.crte_name = #{crteName}
            </if>
            <if test="crteTime != null">
                and a.crte_time = #{crteTime}
            </if>
            <if test="keyword != null and keyword!=''" >
                and (a.name like concat('%',#{keyword},'%') or a.pym like concat('%',#{keyword},'%') or a.wbm like concat('%',#{keyword},'%'))
            </if>
            <if test="model != null and model != ''">
              and a.model = #{model}
            </if>
            <if test="ids != null and ids.size() > 0">
                and a.type_code in
                <foreach collection="ids" item="item" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        order by a.crte_time desc
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into base_material
        (id,hosp_code, type_code, bfc_code, code,nation_code, name, spec, price, unit_code, split_ratio, split_unit_code,
        split_price, is_supp_curtain, use_code, remark, prod_code, reg_cert_no, pym, wbm,last_buy_price,
        last_split_buy_price,avg_buy_price,avg_sell_price, reimbursement_ratio,
        is_valid,crte_id, crte_name, crte_time,model,other_name,is_offical)

values (#{id},#{hospCode}, #{typeCode}, #{bfcCode}, #{code},#{nationCode}, #{name}, #{spec}, #{price}, #{unitCode},#{splitRatio}, #{splitUnitCode},
        #{splitPrice}, #{isSuppCurtain}, #{useCode}, #{remark}, #{prodCode}, #{regCertNo}, #{pym}, #{wbm}, #{lastBuyPrice},
        #{lastSplitBuyPrice},#{avgBuyPrice},#{avgSellPrice},#{reimbursementRatio},
        #{isValid},#{crteId}, #{crteName}, #{crteTime},#{model},#{otherName}, #{isOffical})

    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update base_material
        <set>
                hosp_code = #{hospCode},
                type_code = #{typeCode},
                bfc_code = #{bfcCode},
                code = #{code},
                nation_code = #{nationCode},
                name = #{name},
                spec = #{spec},
                price = #{price},
                unit_code = #{unitCode},
                last_buy_price = #{lastBuyPrice},
                last_split_buy_price = #{lastSplitBuyPrice},
                avg_buy_price = #{avgBuyPrice},
                avg_sell_price = #{avgSellPrice},
                split_ratio = #{splitRatio},
                split_unit_code = #{splitUnitCode},
                split_price = #{splitPrice},
                is_supp_curtain = #{isSuppCurtain},
                use_code = #{useCode},
                remark = #{remark},
                prod_code = #{prodCode},
                reg_cert_no = #{regCertNo},
                pym = #{pym},
                wbm = #{wbm},
                is_valid = #{isValid},
                model = #{model},
                other_name = #{otherName},
                is_offical = #{isOffical},
                reimbursement_ratio = #{reimbursementRatio}
        </set>
            where id = #{id}  and hosp_code = #{hospCode}
    </update>

    <update id="updateList">
        <foreach collection="list" item="item" index="index"  separator=";">
            update base_material
            <set>
                <if test="item.typeCode != null and item.typeCode != ''">
                    type_code = #{item.typeCode},
                </if>
                <if test="item.bfcCode != null">
                    bfc_code = #{item.bfcCode},
                </if>
                <if test="item.code != null and item.code != ''">
                    code = #{item.code},
                </if>
                <if test="item.nationCode != null and item.nationCode != ''">
                    nation_code = #{item.nationCode},
                </if>
                <if test="item.name != null and item.name != ''">
                    name = #{item.name},
                </if>
                <if test="item.spec != null and item.spec != ''">
                    spec = #{spec},
                </if>
                <if test="item.price != null">
                    price = #{price},
                </if>
                <if test="item.unitCode != null and item.unitCode != ''">
                    unit_code = #{item.unitCode},
                </if>
                <if test="item.lastBuyPrice != null">
                    last_buy_price = #{item.lastBuyPrice},
                </if>
                <if test="item.lastSplitBuyPrice != null">
                    last_split_buy_price = #{item.lastSplitBuyPrice},
                </if>
                <if test="item.avgBuyPrice != null">
                    avg_buy_price = #{item.avgBuyPrice},
                </if>
                <if test="item.avgSellPrice != null">
                    avg_sell_price = #{item.avgSellPrice},
                </if>
                <if test="item.splitRatio != null">
                    split_ratio = #{item.splitRatio},
                </if>
                <if test="item.splitUnitCode != null and item.splitUnitCode != ''">
                    split_unit_code = #{item.splitUnitCode},
                </if>
                <if test="item.splitPrice != null">
                    split_price = #{item.splitPrice},
                </if>
                <if test="item.isSuppCurtain != null">
                    is_supp_curtain = #{item.isSuppCurtain},
                </if>
                <if test="item.useCode != null and item.useCode != ''">
                    use_code = #{item.useCode},
                </if>
                <if test="item.remark != null and item.remark != ''">
                    remark = #{item.remark},
                </if>
                <if test="item.prodCode != null">
                    prod_code = #{item.prodCode},
                </if>
                <if test="item.regCertNo != null and item.regCertNo != ''">
                    reg_cert_no = #{item.regCertNo},
                </if>
                <if test="item.pym != null and item.pym != ''">
                    pym = #{pym},
                </if>
                <if test="item.wbm != null and item.wbm != ''">
                    wbm = #{item.wbm},
                </if>
                <if test="item.isValid != null">
                    is_valid = #{item.isValid},
                </if>
                <if test="item.model != null">
                  model = #{item.model},
                </if>
                <if test="item.otherName!= null">
                   other_name = #{item.otherName}
                </if>
                <if test="item.isOffical!= null">
                    is_offical = #{item.isOffical}
                </if>
            </set>
            where id = #{item.id} and hosp_code = #{item.hospCode}
        </foreach>
    </update>

    <!--通过主键删除-->
    <update id="updateStatus">
        update  base_material
         <set>
            is_valid = #{isValid}
         </set>
          where id in
         <foreach collection="ids" item="id" open="(" separator="," close=")">
             #{id}
         </foreach>
        and hosp_code = #{hospCode}
    </update>

    <!--判断材料编码是否已经存在-->
    <select id="isCodeExist" resultType="java.lang.Integer">
        select count(code)
        from base_material
        where hosp_code = #{hospCode} and code = #{code}
        <if test="id != null and id != ''">
            and id != #{id}
        </if>
    </select>

    <!--查询某库位的材料的信息-->
    <select id="queryStockMaterialInfoPage" resultMap="BaseMaterialMap">
        SELECT
        a.id, a.hosp_code, a.type_code, a.bfc_code, a.code,nation_code, a.name, a.name as itemName,'2' as itemCode,
         a.spec, a.price, a.unit_code, a.split_ratio, a.split_unit_code, a.split_price,a.model,
        a.is_supp_curtain, a.use_code, a.remark, a.prod_code, a.reg_cert_no, a.pym, a.wbm, a.is_valid, a.crte_id, a.crte_name, a.crte_time,
        a.last_buy_price, a.last_split_buy_price, a.avg_buy_price, a.avg_sell_price,a.other_name,
        (select t.name from base_dept t where t.id = l.biz_id and t.hosp_code = l.hosp_code)bizName,
        l.biz_id ,
        l.batch_no,l.expiry_date,l.num stockNum,l.split_num,
        (select d.id from base_finance_classify d where a.bfc_code = d.code and a.hosp_code = d.hosp_code limit 1) bfcId,
        (select d.name from base_finance_classify d where a.bfc_code = d.code and a.hosp_code = d.hosp_code limit 1) bfcName
        FROM
        stro_stock k,
        stro_stock_detail l,
        base_material a
        WHERE
        k.hosp_code = l.hosp_code
        AND k.biz_id = l.biz_id
        AND k.item_id = l.item_id
        AND l.item_id = a.id
        AND l.hosp_code = a.hosp_code
        AND k.item_code = '2'
        <if test="bizId !=null and bizId != ''">
            AND l.biz_id = #{bizId}
        </if>
        AND l.hosp_code = #{hospCode}
        <if test="keyword !=null and keyword != ''">
            and (a.name like concat('%',#{keyword},'%')
            or a.pym like concat('%',#{keyword},'%')
            or a.wbm like concat('%',#{keyword},'%'))
        </if>
        <if test='isStoreGtZero !=null and isStoreGtZero == "Y"'>
            and l.num &gt; 0
        </if>

    </select>

    <!--查询某库位的材料的信息,用于调价-->
    <select id="queryNewStockMaterialInfoPage" resultMap="BaseMaterialMap">
        SELECT
            a.hosp_code,
            a.id,
            max(a.NAME) AS itemName,
            '2' AS itemCode,
            max(a.price) price,
            max(a.last_buy_price) last_buy_price,
            sum(l.num) stockNum,
            max(a.unit_code) unit_code,
            max(a.split_ratio) split_ratio,
            sum(l.split_num) split_num,
            max(a.split_unit_code) split_unit_code,
            max(a.last_split_buy_price) last_split_buy_price,
            max(a.split_price) split_price,
            max(a.spec) spec,
            max(a.model) model,
            (select bp.name from base_product bp where bp.code = max(a.prod_code) and bp.hosp_code = a.hosp_code) as prodName
        FROM
        stro_stock k,
        stro_stock_detail l,
        base_material a
        WHERE
        k.hosp_code = l.hosp_code
        AND k.biz_id = l.biz_id
        AND k.item_id = l.item_id
        AND l.item_id = a.id
        AND l.hosp_code = a.hosp_code
        AND k.item_code = '2'
        <if test="bizId !=null and bizId != ''">
            AND l.biz_id = #{bizId}
        </if>
        AND l.hosp_code = #{hospCode}
        <if test="keyword !=null and keyword != ''">
            and (a.name like concat('%',#{keyword},'%')
            or a.pym like concat('%',#{keyword},'%')
            or a.wbm like concat('%',#{keyword},'%'))
        </if>
        <if test='isStoreGtZero !=null and isStoreGtZero == "Y"'>
            and l.num &gt; 0
        </if>
        GROUP BY
        a.hosp_code,
        a.id

    </select>
    <select id="queryUnifiedPage" resultType="cn.hsa.module.base.bmm.dto.BaseMaterialDTO">
        select a.id, a.hosp_code, a.type_code, a.bfc_code, a.code, a.name,
               a.price, a.spec, a.unit_code, a.last_buy_price, a.last_split_buy_price,
               a.avg_buy_price, avg_sell_price, a.split_unit_code, a.split_ratio, a.split_price,
               a.is_supp_curtain, a.use_code, a.remark, a.prod_code, a.reg_cert_no,
               a.pym, a.wbm, a.is_valid, a.crte_id, a.crte_name, a.crte_time, a.nation_code, a.model from base_material
               a left join insure_item_match  b on a.id = b.hosp_item_id where a.hosp_code =#{hospCode} and
               b.hosp_item_id is null  and a.is_valid ='1'
        <if test="keyword !=null and keyword != ''">
            and (a.name like concat('%',#{keyword},'%')
            or a.pym like concat('%',#{keyword},'%')
            or a.wbm like concat('%',#{keyword},'%'))
        </if>
        order by a.crte_time
    </select>

    <insert id="insertList">
        insert into base_material(id,hosp_code, type_code, bfc_code, code,nation_code, name, spec, price, unit_code, split_ratio, split_unit_code, split_price, is_supp_curtain, use_code, remark, prod_code, reg_cert_no, pym, wbm,
        last_buy_price,last_split_buy_price,avg_buy_price,avg_sell_price,is_valid,
        crte_id, crte_name, crte_time,model,other_name)
        values
         <foreach collection="list" item="item" separator=",">
            (#{item.id},#{item.hospCode}, #{item.typeCode}, #{item.bfcCode}, #{item.code},#{item.nationCode}, #{item.name}, #{item.spec},
             #{item.price}, #{item.unitCode}, #{item.splitRatio}, #{item.splitUnitCode}, #{item.splitPrice},
             #{item.isSuppCurtain}, #{item.useCode}, #{item.remark}, #{item.prodCode}, #{item.regCertNo}, #{item.pym}, #{item.wbm},
            #{item.lastBuyPrice},#{item.lastSplitBuyPrice},#{item.avgBuyPrice},#{item.avgSellPrice},#{item.isValid},
            #{item.crteId}, #{item.crteName}, #{item.crteTime},#{item.model},#{item.otherName})
         </foreach>
    </insert>
    <insert id="insertInsureMatch" parameterType="list">
        insert into insure_item_match
        (id, hosp_code, insure_reg_code, item_code, molss_item_id,
        pqcc_item_id, hosp_item_id, hosp_item_name, hosp_item_code,
        hosp_item_type, hosp_item_spec, hosp_item_unit_code, hosp_item_prep_code, hosp_item_price,
        insure_item_name, insure_item_code, insure_item_type, insure_item_spec,
        insure_item_unit_code, insure_item_prep_code, insure_item_price,
        deductible, standard_code, check_price, manufacturer, audit_code,
        is_match, is_trans, is_valid, take_date,
        lose_date, pym, wbm, crte_id, crte_name, crte_time) values
        <foreach collection="baseMaterialDTOList" item="item" index="index" separator=",">
            (#{item.id},#{item.hospCode}, #{item.insureRegCode}, #{item.itemCode}, null,
            null, #{item.hospItemId}, #{item.name}, #{item.code}, #{item.hospItemType},
            #{item.spec}, #{item.unitCode}, null, #{item.price},
            #{item.insureItemName}, #{item.insureItemCode}, #{item.insureItemType}, #{item.insureItemSpec},
            #{item.insureItemUnitCode}, #{item.insureItemPrepCode}, #{item.insureItemPrice}, #{item.deductible},
            #{item.standardCode}, #{item.checkPrice}, #{item.manufacturer}, #{item.auditCode}, #{item.isMatch},
            #{item.isTrans}, #{item.isValid},
            #{item.takeDate}, #{item.loseDate}, #{item.pym}, #{item.wbm}, #{item.crteId}, #{item.crteName},
            #{item.crteTime}
            )
        </foreach>
    </insert>

    <update id="updateNationCodeById">
        update base_material set nation_code = #{nationCode}  where id = #{id} and hosp_code = #{hospCode}
    </update>

</mapper>
