<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>cn.hsa.cron</groupId>
		<artifactId>hsa-cron</artifactId>
		<version>2.0.1</version>
	</parent>
	<artifactId>xxl-job-admin</artifactId>
	<packaging>jar</packaging>
	<!--定义所有子工程公共组件版本,可覆盖springboot parent中推荐版本-->
	<properties>
		<!--<dockerUrl>8.136.115.215</dockerUrl>-->
		<!--		<dockerUrl>http://172.18.100.104:2375</dockerUrl>-->
		<!--		<dockerUrlZs></dockerUrlZs>-->
		<!--            <dockerUrl>8.136.110.29</dockerUrl>-->
		<!--        <dockerUrl>8.135.102.205</dockerUrl>-->
		<!--		<dockerUrl>https://8.136.115.215:2375</dockerUrl>-->
		<!--		<dockerUrlZs>D:\work\文档资料——和宇\云his\服务器\tqueryCollectorInComeStals-client-certs</dockerUrlZs>-->
		<!--		<dockerUrl>https://8.136.110.29:2375</dockerUrl>-->
		<!--		<dockerUrlZs>D:\work\文档资料——和宇\云his\服务器\29\tls-client-certs</dockerUrlZs>-->
		<dockerUrl>https://8.135.102.205:2375</dockerUrl>
		<dockerUrlZs>D:\work\文档资料——和宇\云his\服务器\docker证书</dockerUrlZs>
		<start-class>com.xxl.job.admin.XxlJobAdminApplication</start-class>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- jetty -->
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-server</artifactId>
				<version>${jetty-server.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-util</artifactId>
				<version>${jetty-server.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-http</artifactId>
				<version>${jetty-server.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-io</artifactId>
				<version>${jetty-server.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-client</artifactId>
				<version>${jetty-server.version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- starter-web：spring-webmvc + autoconfigure + logback + yaml + tomcat -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- starter-test：junit + spring-test + mockito -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- freemarker-starter -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>

		<!-- mybatis-starter：mybatis + mybatis-spring + tomcat-jdbc（default） -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>${mybatis-spring-boot-starter.version}</version>
		</dependency>
		<!-- mysql -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql-connector-java.version}</version>
		</dependency>

		<!-- commons-collections4 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>${commons-collections4.version}</version>
		</dependency>
		<!-- commons-lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3.version}</version>
		</dependency>
		<!-- commons-email -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-email</artifactId>
			<version>${commons-email.version}</version>
		</dependency>

		<!-- quartz ：quartz-2.2.3/c3p0-0.9.1.1/slf4j-api-1.6.6 -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>${quartz.version}</version>
		</dependency>

		<!-- xxl-job-core -->
		<dependency>
			<groupId>com.xuxueli</groupId>
			<artifactId>xxl-job-core</artifactId>
			<version>${project.parent.version}</version>
		</dependency>

	</dependencies>

	<build>
		<finalName>xxl-job-admin</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
				<configuration>
					<mainClass>${start-class}</mainClass>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!--所有properties文件均不会打进jar包，其中配置项需在配置中心进行配置-->
					<!--                    <excludes>-->
					<!--                        <exclude>application.properties</exclude>-->
					<!--                    </excludes>-->
				</configuration>
			</plugin>
			<!--使用docker-maven-plugin插件-->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.2.2</version>
				<!--将插件绑定在某个phase执行-->
				<executions>
					<execution>
						<id>build-image</id>
						<!--用户只需执行mvn package ，就会自动执行mvn docker:build-->
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>

				<configuration>
					<!--指定生成的镜像名,这里是我们的作者名+项目名-->
					<imageName>yuanzibo/${project.build.finalName}</imageName>

					<!--指定标签 这里指定的是镜像的版本，我们默认版本是latest-->
					<imageTags>
						<imageTag>latest</imageTag>
					</imageTags>

					<!--指定基础镜像jdk1.8-->
					<baseImage>java:8</baseImage>

					<!--切换到ROOT目录-->
					<workdir>/</workdir>
					<entryPoint>
						["java","-Xms256m","-Xmx1024m","-jar","/${project.build.finalName}.jar"]
					</entryPoint>

					<!--指定远程 docker api地址-->
					<dockerHost>${dockerUrl}</dockerHost>
					<dockerCertPath>${dockerUrlZs}</dockerCertPath>
					<!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<!--jar 包所在的路径  此处配置的 即对应 target 目录-->
							<directory>${project.build.directory}</directory>
							<!--用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<fork>true</fork>
					<addResources>true</addResources>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
