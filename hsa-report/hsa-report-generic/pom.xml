<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>cn.hsa.report</groupId>
    <artifactId>hsa-report-generic</artifactId>
    <version>1.0.0</version>
    <name>hsa-report-generic</name>

    <parent>
        <artifactId>hsa-report</artifactId>
        <groupId>cn.hsa.report</groupId>
        <version>1.0.0</version>
    </parent>

    <properties>
        <start-class>cn.hsa.report.HsaGenericApplication</start-class>
    </properties>

    <dependencies>

        <dependency>
            <groupId>cn.hsa.report</groupId>
            <artifactId>hsa-report-biz</artifactId>
            <version>1.0.0</version>
        </dependency>

        <dependency>
            <groupId>cn.hsa.report</groupId>
            <artifactId>hsa-report-db</artifactId>
            <version>1.0.0</version>
        </dependency>

        <!-- 1.分布式服务 -->
        <dependency>
            <groupId>cn.hsa.hsaf.adapt</groupId>
            <artifactId>hsaf-generic-rpc</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.dubbo</groupId>
                    <artifactId>dubbo-spring-boot-starter</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.dubbo</groupId>
                    <artifactId>dubbo-dependencies-zookeeper</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.alibaba.cloud</groupId>
                    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
            <version>2.7.6</version>
        </dependency>
        <!-- Dubbo Registry Nacos -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>dubbo-registry-nacos</artifactId>
            <version>2.7.6</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!-- 2.分布式缓存组件 -->
        <dependency>
            <groupId>cn.hsa.hsaf.adapt</groupId>
            <artifactId>hsaf-cache-redis</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <!-- 6.分布式数据库 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.zaxxer</groupId>
                    <artifactId>HikariCP</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--数据库连接驱动-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.48</version>
        </dependency>

    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>2.2.8.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <finalName>hsa-report</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>${start-class}</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--所有properties文件均不会打进jar包，其中配置项需在配置中心进行配置-->
                    <excludes>
                        <exclude>application.properties</exclude>
                        <exclude>config/**/*.properties</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!--            <plugin>-->
            <!--                <groupId>com.spotify</groupId>-->
            <!--                <artifactId>docker-maven-plugin</artifactId>-->
            <!--                <version>1.2.2</version>-->
            <!--                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>build-image</id>-->
            <!--                        &lt;!&ndash;用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>build</goal>-->
            <!--                        </goals>-->
            <!--                    </execution>-->
            <!--                </executions>-->

            <!--                <configuration>-->
            <!--                    &lt;!&ndash;指定生成的镜像名,这里是我们的作者名+项目名&ndash;&gt;-->
            <!--                    <imageName>yuanzibo/${project.build.finalName}</imageName>-->

            <!--                    &lt;!&ndash;指定标签 这里指定的是镜像的版本，我们默认版本是latest&ndash;&gt;-->
            <!--                    <imageTags>-->
            <!--                        <imageTag>latest</imageTag>-->
            <!--                    </imageTags>-->

            <!--                    &lt;!&ndash;指定基础镜像jdk1.8&ndash;&gt;-->
            <!--                    <baseImage>java:8</baseImage>-->

            <!--                    &lt;!&ndash;切换到ROOT目录&ndash;&gt;-->
            <!--                    <workdir>/</workdir>-->
            <!--                    <entryPoint>["java","-Xms256m","-Xmx1024m","-jar","/${project.build.finalName}.jar"]</entryPoint>-->

            <!--                    <exposes>19010</exposes>-->

            <!--                    &lt;!&ndash;指定远程 docker api地址&ndash;&gt;-->
            <!--                    <dockerHost>${dockerUrl}</dockerHost>-->
            <!--                    <dockerCertPath>${dockerUrlZs}</dockerCertPath>-->
            <!--                    &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
            <!--                    <resources>-->
            <!--                        <resource>-->
            <!--                            <targetPath>/</targetPath>-->
            <!--                            &lt;!&ndash;jar 包所在的路径  此处配置的 即对应 target 目录&ndash;&gt;-->
            <!--                            <directory>${project.build.directory}</directory>-->
            <!--                            &lt;!&ndash;用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;-->
            <!--                            <include>${project.build.finalName}.jar</include>-->
            <!--                        </resource>-->
            <!--                    </resources>-->
            <!--                </configuration>-->
            <!--            </plugin>-->
        </plugins>
    </build>

</project>